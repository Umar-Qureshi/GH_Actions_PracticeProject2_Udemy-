name: Deploy website
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Cache dependencies
        # the point of caching is to speed up the workflow as this step can be reused in other jobs
        # this step must happen before the install step
        uses: actions/cache@v4
        with:
          # the path to cache is the node_modules directory
          path: ~/.npm
          # the key is a hash of the package-lock.json file
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
          # if the hash/key matches in any step/job then the saved cache is used
          # The hash/key only changes if package-lock.json changes, so if new dependencies are added or updated
              # then the cache will be invalidated and a new cache will be created
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      # this script-file output is used in the deploy job
      script-file: ${{ steps.publish.outputs.script-file }}
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
          # the cache key is the same as in the test job, so the cache will be reused if package-lock.json is unchanged, saving time
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename
        # The id of the step is used to reference the output in the next job
        id: publish
        # the following run command obtains all .js files in the dist/assets directory
        # and then echoes them to the output variable script-file
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'
      - name: Verify artifact contents
        run: ls -al dist
      - name: Upload artifacts
        # this step uploads the dist directory as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get Build Artifacts
        # this step downloads the artifact created in the build job
        uses: actions/download-artifact@v4
        with:
          name: dist-files
      - name: Output artifact contents
        run: ls
      - name: Output filename
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying..."
